module _

get sys

type Node is Symbol or Operator

[global]
def str(n Node) str
	when n
		is Symbol
			return "Symbol(" + n.s + ", " + n.pos + ")"
		is Operator
			return "Operator(" + n.s + ", " + n.pos + ")"

type Symbol has
	let s str
	let pos uint

type Operator has
	let s str
	let pos uint

type ParseState has
	let s str
	let i uint

type Parser = def (ps ParseState) (Node?, ParseState)

var operator_chars str = "`!@#$%^&*()-=_+{}[]|\\:;,.<>?/"

def parse_symbol(ps ParseState) (Node?, ParseState)
	var start = ps.i
	while start < len(ps.s) and isspace(ps.s[start])
		start += 1
	var i = start
	while i < len(ps.s) and isalpha(ps.s[i])
		i += 1

	if start != i
		return (Symbol(ps.s[start:i], start), ParseState(ps.s, i))
	else
		return (null, ps)

def parse_operator(ps ParseState) (Node?, ParseState)
	var start = ps.i
	while start < len(ps.s) and isspace(ps.s[start])
		start += 1
	var i = start
	while i < len(ps.s) and ps.s[i] in operator_chars
		i += 1

	if start != i
		return (Operator(ps.s[start:i], start), ParseState(ps.s, i))
	else
		return (null, ps)

def parse(text str, parser Parser) Node?
	pair := parser(ParseState(text, 0))
	return pair[0]
	
def main()
	result := readbytes(open("play/test.ml", "rt"))
	assert(result != null)

	when result
		is bytes
			let s str = decode(result, "utf8") or "FAIL"
			print(s, NoLF)
			print(parse(s, parse_symbol))
		is file.Error
			panic("Error!!")

