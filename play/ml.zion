module _

get sys

type Node is Symbol

type Symbol has
	let s str
	let pos uint

[global]
def str(symbol Symbol) str
	return "Symbol(" + symbol.s + ", " + symbol.pos + ")"

type ParseState has
	let s str
	let i uint

type Parser = def (ps ParseState) (Node?, ParseState)

def parse_symbol(ps ParseState) (Node?, ParseState)
	start := ps.i
	var i = ps.i
	while posix.isalpha(ps.s[i])
		i += 1

	if start != i
		return (Symbol(ps.s[start:i], start), ParseState(ps.s, i))
	else
		return (null, ps)

def parse(text str, parser Parser) Node?
	pair := parser(ParseState(text, 0))
	return pair[0]
	
def main()
	l := str("hay")[0:1]
	print(l.length)
	let characters = posix.wcstombs(
		null,
		&l.buffer.raw[l.start],
		0)
	print(characters)
	buffer := wcstombs(&l.buffer.raw[l.start], l.length)
	print(buffer.length)
	assert(buffer.length == 1)
	u := utf8(buffer)
	assert(u.length == 1)
	print(l)

	return

def foo()
	result := readbytes(open("play/test.ml", "rt"))
	assert(result != null)

	when result
		is bytes
			let s str = decode(result, "utf8") or "FAIL"
			print(s, NoLF)
			print("Parsing...")
			print(parse(s, parse_symbol))
		is file.Error
			panic("Error!!")

