import string {Strippable, has_substring_at}
export {
  text, sequence, choice, many, many1, Progress, ParseState, char, not_char,
  Span, until_one_of, lift, span_concat, Parser, digit, skip_space_then,
  word, skip_space, OK, Fail, many_delimited, parse_string}

# The immutable most-recent state of the parser, sans AST state
newtype ParseState = ParseState(String, Int)

# Span is a run of text within the source content
struct Span {
  text String
  pos  Int
}

fn span_concat(spans [Span]) Span {
  return Span(join("", span.text for span in spans),
              len(spans) > 0 ? spans[0].pos : 0)
}

data Progress parsestate node {
  OK(parsestate, node)
  Fail
}

instance Str Span {
  fn str(span) => span.text
}

instance Strippable Span {
  fn strip(span) {
    let Span(text, pos) = span
    return Span(strip(text), pos)
  }
}

fn digit(ps ParseState) Progress ParseState Span {
  let ParseState(content, index) = ps
  if index < len(content) and isdigit(content[index]) {
    return OK(ParseState(content, index + 1),
              Span(str(content[index]), index))

  } else {
    return Fail
  }
}

fn char(ch Char) fn (ParseState) Progress ParseState Span {
  return fn (ps) {
    let ParseState(content, index) = ps
    if index < len(content) and content[index] == ch {
      return OK(
        ParseState(content, index + 1),
        Span(str(ch), index))
    } else {
      return Fail
    }
  }
}

fn not_char(ch Char) fn (ParseState) Progress ParseState Span {
  return fn (ps) {
    let ParseState(content, index) = ps
    if index < len(content) and content[index] != ch {
      return OK(
        ParseState(content, index + 1),
        Span(content[index:index+1], index))
    } else {
      return Fail
    }
  }
}

fn word(ps) {
  let ParseState(content, index) = skip_space(ps)
  var cur = index
  while cur < len(content) and isalpha(content[cur]) {
    cur += 1
  }
  if index == cur {
    return Fail
  } else {
    return OK(ParseState(content, cur), Span(content[index:cur], index))
  }
}

fn text(k String, skip_leading_space Bool) fn (ParseState) Progress ParseState Span {
  return fn (parse_state) {
    let ParseState(content, index) = parse_state
    var start = index
    if skip_leading_space {
      # TODO: make skipping leading whitespace optional
      while start < len(content) and isspace(content[start]) {
        start += 1
      }
    }
    var i = start
    while i < len(content) and i-start < len(k) and k[i-start] == content[i] {
      i += 1
    }
    if start != i {
      let symbol = content[start:i]
      if symbol == k {
        return OK(ParseState(content, i), Span(symbol, start))
      }
    }
    return Fail
  }
}

fn skip_space(ps ParseState) ParseState {
    let ParseState(content, index) = ps
    var start = index
    let content_len = len(content)
    while start < content_len and isspace(content[start]) {
        start += 1
    }
    if start != index {
      return ParseState(content, start)
    } else {
      return ps
    }
}

fn advance(progress, skipper) => match progress {
  OK(parsestate, node) => OK(skipper(parsestate), node)
  Fail => Fail
}

fn maybe_skip_space(skip Bool) => skip ? skip_space : id

fn skip_space_then(parser) => |ps| => parser(skip_space(ps))

fn sequence(parsers [fn (parsestate) Progress parsestate a]) fn (parsestate) Progress parsestate [a] {
  return fn (parse_state) {
    let nodes = [] as [a]
    var parse_state = parse_state
    for parser in parsers {
      match parser(parse_state) {
        OK(next_parse_state, node) {
          parse_state = next_parse_state
          append(nodes, node)
        }
        Fail {
          return Fail
        }
      }
    }
    return OK(parse_state, nodes)
  }
}

fn until_one_of(chars String) {
  # Never fails, will return an empty string
  return fn (parse_state) {
    let ParseState(content, index) = parse_state
    var cur = index
    while cur < len(content) {
      if content[cur] in chars {
        break
      }
      cur += 1
    }
    let span = Span(content[index:cur], index)
    return OK(ParseState(content, cur), span)
  }
}

instance Functor (Progress parsestate) {
  fn fmap(f, progress) => match progress {
    OK(parsestate, node) => OK(parsestate, f(node))
    Fail => Fail
  }
}

# Returns a new parser that has lifted the value by applying f.
fn lift(f, parser) => |ps| => fmap(f, parser(ps))

fn choice(parsers) {
  return fn (parse_state) {
    for parser in parsers {
      if parser(parse_state) is progress@OK(_, _) {
        return progress
      }
    }
    return Fail
  }
}

fn many(parser) fn (parsestate) Progress parsestate [a] {
  return fn (parse_state) {
    let nodes = [] as [a]
    var parse_state = parse_state
    while True {
      if parser(parse_state) is OK(next_parse_state, node) {
        parse_state = next_parse_state
        append(nodes, node)
      } else {
        break
      }
    }
    return OK(parse_state, nodes)
  }
}

fn many_delimited(delim, parser) {
  let delim_len = len(delim)
  return fn (ps) {
    let nodes = [] as [a]
    var ps = ps
    while True {
      if len(nodes) != 0 {
        # Look for delimiter
        let ParseState(content, index) = skip_space(ps)
        if has_substring_at(content, index, delim) {
          # Found delimiter, eat it
          ps = ParseState(content, index + delim_len)
        } else {
          # No delim, we are done with this list
          return OK(ParseState(content, index), nodes)
        }
      }

      if parser(ps) is OK(next_parse_state, node) {
        ps = next_parse_state
        append(nodes, node)
      } else if len(nodes) != 0 {
        return Fail
      } else {
        assert(len(nodes) <= 1)
        return OK(ps, nodes)
      }
    }
    return Fail
  }
}

fn many1(parser) fn (parsestate) Progress parsestate [a] {
  let ks_parser = many(parser)
  return fn (ps) {
    let progress = ks_parser(ps)
    return match progress {
      OK(ps, xs) => len(xs) > 0 ? progress : Fail
      Fail => Fail
    }
  }
}

fn parse_string(parser fn (ParseState) Progress ParseState a, s String) Maybe a {
  return match parser(ParseState(s, 0)) {
    OK(ParseState(content, index), node) => Just(node)
    Fail => Nothing
  }
}

