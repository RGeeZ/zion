import itertools {repeat}
import string {Strippable}
export {
  text, sequence, choice, many, many1, ParseState, Step, char, not_char, Span,
  until_one_of, lift, span_concat, Parser, step, destructure_step}

# The immutable most-recent state of the parser, sans AST state
newtype ParseState = ParseState(String, Int)

# Span is a run of text within the source content
struct Span {
  text String
  pos  Int
}

fn span_concat(spans [Span]) Span {
  return Span(join("", span.text for span in spans),
              len(spans) > 0 ? spans[0].pos : 0)
}

newtype Step a = Step(a, ParseState)

instance Functor Step {
  fn fmap(f fn (a) b, step Step a) Step b {
    let Step(a, ps) = step
    return Step(f(a), ps)
  }
}

instance Str Span {
  fn str(span) => span.text
}

instance Strippable Span {
  fn strip(span) {
    let Span(text, pos) = span
    return Span(strip(text), pos)
  }
}

fn char(ch Char) fn (ParseState) Maybe (Step Span) {
  return fn (ps) {
    let ParseState(content, index) = ps
    if index < len(content) and content[index] == ch {
      return Just(Step(Span(str(ch), index), ParseState(content, index + 1)))
    }
    return Nothing
  }
}

fn not_char(ch Char) fn (ParseState) Maybe (Step Span) {
  return fn (ps) {
    let ParseState(content, index) = ps
    if index < len(content) and content[index] != ch {
      return Just(Step(Span(content[index:index+1], index), ParseState(content, index + 1)))
    }
    return Nothing
  }
}

fn text(k String) fn (ParseState) Maybe (Step Span) {
    return fn (parse_state) {
        let ParseState(content, index) = parse_state
        var start = index
        while start < len(content) and isspace(content[start]) {
            start += 1
        }
        var i = start
        while i < len(content) and i-start < len(k) and k[i-start] == content[i] {
            i += 1
        }
        if start != i {
            let symbol = content[start:i]
            if symbol == k {
                return Just(Step(Span(symbol, start), ParseState(content, i)))
            }
        }
        return Nothing
    }
}

class Parser parsestate step {
  fn step(node, parsestate) step
  fn destructure_step(step) (node, parsestate)
}

instance Parser ParseState (Step a) {
  step = Step
  fn destructure_step(step) => match step {
    Step(node, parse_state) => (node, parse_state)
  }
}

fn sequence(parsers [fn (parsestate) Maybe (step a)]) fn (parsestate) Maybe (step [a]) {
  return fn (parse_state) {
    let nodes = [] as [a]
    var parse_state = parse_state
    for parser in parsers {
      match parser(parse_state) {
        Just(step) {
          let (node, next_parse_state) = destructure_step(step)
          parse_state = next_parse_state
          append(nodes, node)
        }
        Nothing {
          return Nothing
        }
      }
    }
    return Just(step(nodes, parse_state))
  }
}

fn until_one_of(chars String) {
  # Never fails, will return an empty string
  return fn (parse_state) {
    let ParseState(content, index) = parse_state
    var cur = index
    while cur < len(content) {
      if content[cur] in chars {
        break
      }
      cur += 1
    }
    let span = Span(content[index:cur], index)
    return Just(Step(span, ParseState(content, cur)))
  }
}

fn lift(f, parser) {
  # Returns a new parser that has lifted the value by applying f.
  return |ps| => fmap(|x| => fmap(f, x), parser(ps))
}

fn choice(parsers) {
  return fn (parse_state) {
    for parser in parsers {
      if parser(parse_state) is just_step@Just(_) {
        return just_step
      }
    }
    return Nothing
  }
}

fn many(parser) fn (ParseState) Maybe (Step [a]) {
  let nodes = []
  return fn (parse_state) {
    var parse_state = parse_state
    while True {
      if parser(parse_state) is Just(Step(node, next_parse_state)) {
        parse_state = next_parse_state
        append(nodes, node)
      } else {
        break
      }
    }
    return Just(Step(nodes, parse_state))
  }
}

fn many1(parser) fn (ParseState) Maybe (Step [a]) {
  let ks_parser = many(parser)
  return fn (ps) {
    let maybe_step = ks_parser(ps)
    return match maybe_step {
      Just(Step(xs, ps)) => len(xs) > 0 ? maybe_step : Nothing
      Nothing => Nothing
    }
  }
}
