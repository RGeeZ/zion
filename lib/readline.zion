module readline

get file

type Readline is {
    EOF
    Error(errno int)
    Line(line str)
}

[global]
fn readline() Readline {
    var buf *?char
    var linecap int = 0

    if posix.getline(&buf, &linecap, stdin) == -1 or buf == null {
        return EOF
    }

    var lim = posix.strlen(buf) - 1
    while lim >= 0 and posix.isspace(buf[lim]) {
        lim -= 1
    }
    length := lim + 1
    buf[length] = 0

    ret := str(OwningBuffer(buf, length), 0, length)
    # runtime.gc()
    return Line(ret)
}

[global]
fn readline(fp *posix.FILE) Readline {
    var linecap int = 0
    var line *?char = null
    linelen := posix.getline(&line, &linecap, fp)
    if linelen == -1 {
        return EOF
    }

    assert(line != null)

    # make sure we strip the LF char
    if linelen > 0 {
        if line[linelen - 1] == 10 {
            line[linelen - 1] = 0
        }
    }
    return Line(str(OwningBuffer(line)))
}

type LinesIter F has {
    var file F
}

[global]
fn bind[F, T](lines LinesIter F, f fn (lines [str]) T) T {
    let text_lines [str]
    for line in lines {
        append(text_lines, line)
    }
    return f(text_lines)
}

[global]
fn readlines() LinesIter *posix.FILE {
    return readlines(stdin)
}

[global]
fn readlines[F](f F) LinesIter F {
    return LinesIter(f)
}

[global]
fn __iter__[F](line_iterator LinesIter F) LinesIter F {
    return line_iterator
}

[global]
fn __next__(fl LinesIter any) str? {
    return match readline(fl.file) {
        Line(line) => Just(line)
        Error(errno) {
            print("Error: encountered error " + errno + " while reading file")
            Nothing
        }
        EOF => Nothing
    }
}
