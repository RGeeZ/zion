export {Vector, array, size, capacity, flatten}

struct Vector a {
    # TODO: make sure offset in struct is correct RE dim_offset
    array var (*a)
    size var Int
    capacity var Int
}

instance HasSetMembership [a] a {
  fn in(value, vec) Bool {
    for x in vec {
      if x == value {
        return True
      }
    }
    return False
  }
  fn not_in(value, collection) => not (value in collection)
}

fn flatten(xss [[a]]) [a] {
  let ys = []
  for xs in xss {
    for y in xs {
      append(ys, y)
    }
  }
  return ys
}

instance FoldFromLeft [a] a b {
  fn foldl(binop, xs, initial b) b {
    var value = initial
    for x in xs {
      value = binop(value, x)
    }
    return value
  }
}

instance Functor Vector {
  fn fmap(f, xs) {
    let ys = []
    reserve(ys, len(xs))
    for x in xs {
      append(ys, f(x))
    }
    return ys
  }
}
