module _
link module posix
link module runtime

type vector_t struct
	var reserved __int__
	var size     __int__
	var items    **var_t

type vector{T} link vector_t __vector_free__ __vector_mark__

def __init__() vector{any T}
	return __create_var(typeinfo(vector{any T}, vector_t, __vector_free__, __vector_mark__)) as vector{any T}
		
def __finalize__(v vector{any T})
	__vectorfree__(v as *var_t)

def __getitem__(vec [any T], index int) any T
	return __vectorgetitem__(vec as *var_t, index.raw) as any T

def __setitem__(vec [any T], index int, t any T) void
	return __setvectoritem__(vec as *var_t, index.raw, t as *var_t)

def append(vec [any T], t any T) void
	__vectorappend__(vec as *var_t, t as *var_t)

def resize(vec [any T], size int, default any T) void
	return __vectorresize__(vec as *var_t, size.raw, default) as! [any T]

# link def vec(TYPE, capacity int) TYPE[]

def __vector_mark__(var *var_t)
	v := var as *vector_t
	var i __int__ = 0
	while i < v.size
		runtime.mark_allocation(v.items[i])
		i += 1r

def __vectorfree__(var *var_t)
	# assert(var != 0)
	vector := var as *vector_t

	/* the gc will handle cleaning up everything that we pointed to, but we need to free up our
	 * extra allocated heap space. */
	posix.free(vector->items)

	/* zion will handle deleting the actual vector_t, since it will be attached to the managed
	 * object */


def __getvectoritem__(vector *vector_t, index __int__) *var_t
	if index >= 0 && index < vector.size
		return vector->items[index]
	else
		print("zion: array index out of bounds (" + (vector as __int__) + index + ")")
		posix.exit(-1)
		return 0r

def __setvectoritem__(vector *vector_t, index __int__, item *var_t)
	if index < 0r
	   return

	if index < vector.size
		vector.items[index] = item
	else
		print("zion: array index out of bounds (" + (vector as __int__) + str(index) + ")")
		posix.exit(-1)

def __vectorappend__(vector *vector_t, item *var_t)
	if vector.reserved > vector.size
		vector.items[vector.size] = item
		vector.size += 1r
	elif vector.items != nil
		# assert(vector->reserved == vector->size)
		new_reserved := vector.reserved * 2r
		if new_reserved < 16
			/* start at a level that we avoid a lot of extra calls to malloc */
			new_reserved = 16

		new_items := posix.calloc(sizeof(*var_t), new_reserved) as **var_t
		posix.memcpy(new_items, vector.items, sizeof(*var_t) * vector->size)
		new_items[vector->size] = item
		vector->size += 1r

		posix.free(vector.items)
		vector.items = new_items
