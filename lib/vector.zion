module _

type SetItemCache{T} has
	var value T
	var hash int

type Set{T} has
	var buffer [list{SetItemCache{T}}?]
	var count int

def hash(v str) int
	return int(hash(v.raw))

def add(s Set{any T}, t any T)
	index := hash(t)
	index = index % len(s.buffer)
	p := s.buffer[index]
	if p
		while p.val != t
		
		prepend(list_at_slot, key)
	else
		s.buffer[index] = list(key, nil)

def remove(s Set{any T}, t any T) bool
	index := hash(t)
	index = index % len(s.buffer)
	list_at_slot := s.buffer[index]




def main()
	s := Set(mkbuffer(int?[], 4))

type __vector__ struct
	var type_info *__typeinfo
	
