module list

type List T is {
    Cons(t T, next List T)
    Nil
}

fn nth[T](l List T, index int) T? {
    while index >= 0 {
        match l {
            Cons(t, next) {
                if index == 0 {
                    return Just(t)
                } else {
                    l = next
                    index -= 1
                }
            }
            Nil {
                return Nothing
            }
        }
    }
    return Nothing
}

[global]
fn len(l List any) int {
    match l {
        Cons(_, next) {
            return len(next) + 1
        }
        Nil {
            return 0
        }
    }
}

[global]
fn str(l List any) str {
    return "[...list...]"
}

type Pair X Y is {
    Pair(x X, y Y)
}

fn merge[X](xs_ [X], ys_ [X]) [X] {
    match Pair(xs_, ys_) {
        Pair(Nil, ys) => return ys
        Pair(xs, Nil) => return xs
        Pair(Cons(x, xs), Cons(y, ys)) {
            if x <= y {
                return Cons(x, merge(xs, ys_))
            } else {
                return Cons(y, merge(xs_, ys))
            }
        }
    }
}
