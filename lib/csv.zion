import itertools {zip}
import parser {ParseState, Span, Step, char, not_char, choice, until_one_of, sequence,
               many, lift, span_concat, text}

export {read_csv_dicts, HasHeaderRow, UseFieldNames}

fn split_csv_line(parse fn (ParseState) Maybe (Step [String]), line String) [String] {
  if parse(ParseState(line, 0)) is Just(Step(fields, _)) {
    return fields
  }
  return []
}

data ReadCSVDicts {
  HasHeaderRow
  UseFieldNames([String])
}

fn convert_quote(span Span) Span {
  let Span(q, i) = span
  return Span("\"", i)
}

fn parse_csv_line(ps ParseState) Maybe (Step [String]) {
  let escaped_quote = lift(convert_quote, text("\\\""))
  let term_parser = lift(
    strip,
    choice([
      lift(get_indexed_item($, 1),
        sequence([
          char('"'),
          lift(span_concat, many(choice([escaped_quote, not_char('"')]))),
          char('"'),
        ])),
      until_one_of(",")
    ]))

  let comma = char(',')
  let parse_terms = lift(
    compose(fmap(str, $), flatten),
    sequence([
      many(
        lift(get_indexed_item($, 0),
          sequence([term_parser, comma]))),
      lift(fn (x) => [x], term_parser),
    ]))

  return parse_terms(ps)
}

fn read_csv_dicts(stream, read_csv_dicts ReadCSVDicts) fn () Maybe (Map String String) {
  let linereader = iter(readlines(stream))
  var headers = []
  var have_headers = False

  return fn () {
    if not have_headers {
      have_headers = True
      match read_csv_dicts {
        HasHeaderRow {
          if linereader() is Just(line) {
            headers = split_csv_line(parse_csv_line, line)
          } else {
            return Nothing
          }
        }
        UseFieldNames(given_headers) {
          headers = vector(given_headers)
        }
      }
    }

    if linereader() is Just(line) {
      return Just({key: value
                   for (key, value) in zip(headers,
                                           split_csv_line(parse_csv_line,
                                                          line))})
    } else {
      return Nothing
    }
  }
}
