global

type signed bits = integer(bits, true)
type unsigned bits = integer(bits, false)

# TODO: inject correct size for platform from reader macro
type int = signed 64
type uint = unsigned 64

type size_t = unsigned 64
type ssize_t = signed 64

type int64 = signed 64
type uint64 = unsigned 64

type int32 = signed 32
type uint32 = unsigned 32

type int16 = signed 16
type uint16 = unsigned 16

type int8 = signed 8
type uint8 = unsigned 8

type typeid = unsigned 32

type var_t struct
	var type_info *type_info_t
	# and a ref-count of its own
	var mark int
	var next *?var_t
	var prev *?var_t
	var allocation uint
	#
	# THE ACTUAL DATA IS APPENDED HERE
	#

type type_info_t struct
	var type_id   int32
	var type_kind int32
	var size      size_t
	var name      *char

type type_info_offsets_t struct
	var type_info_head type_info_t
	var finalize_fn    def (v *var_t) void
	var refs_count     int16
	var ref_offsets    *int16

type type_info_mark_fn_t struct
	var type_info_head type_info_t

	# the destructor for this type, if one exists. NB: if you change the index
	# of this dimension, update DTOR_INDEX
	var finalize_fn def (v *var_t) void

	# the mark function for this type.
	var mark_fn def (v *var_t) void

type tag_t struct
	var type_info *type_info_t

#   The map for a single function's stack frame.  One of these is
#   compiled as constant data into the executable for each function.
#  
#   Storage of metadata values is elided if the %metadata parameter to
#   @llvm.gcroot is null.
type stack_frame_map_t struct
	var num_roots int32  # Number of roots in stack frame.
	var num_meta  int32  # Number of metadata entries.  May be < num_roots.

#   A link in the dynamic shadow stack.  One of these is embedded in
#   the stack frame of each function on the call stack.
type stack_entry_t struct
	var next *stack_entry_t       # Link to next stack entry (the caller's).
	var map  *stack_frame_map_t   # Pointer to constant stack_frame_map_t.

type stack_entry_plus_root_t struct
	var next  *stack_entry_t       # Link to next stack entry (the caller's).
	var map   *stack_frame_map_t   # Pointer to constant stack_frame_map_t.
	var root0 *?void

