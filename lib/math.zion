module math @1.0
get posix

type Complex has {
    var real float
    var imag float
}

[global]
fn str(c Complex) str {
    var s = "" + str(c.real);
    if c.imag < 0 {
        s = s + " -"
    } else {
        if c.imag == 0.0 {
            return s
        }
        s = s + " + "
    }
    return s + str(math.abs(c.real)) + "i"
}

[global]
fn __times__(a Complex, b Complex) Complex {
    return Complex(a.real * b.real - a.imag * b.imag,
        a.imag * b.real + a.real * b.imag)
}

[global]
fn __plus__(a Complex, b Complex) Complex {
    return Complex(a.real + b.real, a.imag + b.imag)
}

fn rounded_tenth(x int) int {
    return (x + 5) / 10
}

[global]
fn abs[T](x T) T {
    if x < 0 {
        return -x
    } else {
        return x
    }
}

[global]
fn min[T](x T, y T) T {
    if x < y {
        return x
    } else {
        return y
    }
}

fn sum_of_squares(N int) int {
    var ret = 0
    var n = 0
    var n_squared = 0
    while n <= N {
        n_squared = n * n
        ret += n_squared
        n += 1
    }
    return ret
}

fn gcd(x int, y int) int {
    if x == y {
        return x
    } elif x < y {
        return gcd(x, y - x)
    } else {
        return gcd(x - y, y)
    }
}
