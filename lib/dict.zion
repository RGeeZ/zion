import list {List, Cons, Nil}
export {Dict, insert}

newtype Dict key value = Dict([List (Int, key, value)], var Int)

instance HasDefault (Dict key value) {
    /* just start with an array of capacity 4 with 0 items */
    fn new() => Dict([Nil, Nil, Nil, Nil])
}

fn insert(dict Dict key value, key key, value value) {
    let Dict(storage, var size) = dict
    insert_core(storage, var size, key, value)
}

fn overwrite_key_value(storage, key, value) {

fn insert_core(storage, var size, key, value) {
    var bucket_count = len(storage)

    match! get_core(storage, key) {
        Just(_) {
            overwrite_key_value(storage, key, value)
            return
        }
    }

    if size >= 2 * bucket_count / 3 {
        /* grow the storage */
        let target_bucket_count = bucket_count * 4/3
        let new_storage = []
        reserve(new_storage, target_bucket_count)

        /* put a bunch of Nothing into the buckets */
        var i = 0
        while i < target_bucket_count {
            append(new_storage, Nothing)
            i += 1
        }

        /* go over all the pre-existing items and insert them in the new storage */
        for maybe_pair in storage {
            match maybe_pair {
                Just((key, list)) {
                    for value in list {
                        insert_no_grow(new_storage,
                            var new_count, key, value)
                        }
                    }
                }
            }




    let index = hash(key) % bucket_count
    if 
}
