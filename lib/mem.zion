module mem
link module posix

type Value has native
	var size int64_t
	var name __str__
	var typeinfo TypeInfo

type TypeInfo has native
	var typeid __typeid__
	var addref def (v Value) void
	var release def (v Value) void

[module std]
def allocate_value(size __int__, name __str__, type_info TypeInfo) Value
	buf := posix.calloc(sizeof(Value) + size, (1).raw) as! Value
	buf.size = size
	buf.name = posix.strdup(name)
	buf.type_info = type_info
	return buf

[module std]
def addref_value(v Value) void
	v.typeinfo.addref(v)
	
[module std]
def release_value(v Value) void
	if v.typeinfo.release(v) == 0
		posix.free(v.name)

type Vector has
	var x float
	var y float

def sample()
	
	x := Vector(2.3, 4.4)
