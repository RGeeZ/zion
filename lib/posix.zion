module posix

link in "c"
link in "m"
link in "bsd" # for arc4random_...
link in "rt_posix.o"

link [global] fn isalpha(ch posix.int) bool
link [global] fn isdigit(ch posix.int) bool
link [global] fn isnumber(ch posix.int) bool
link [global] fn isspace(ch posix.int) bool
link [global] fn sqrt(x float) float
link fn arc4random_buf(dst *void, cb size_t) posix.int # you may need to install libbsd
link fn arc4random_stir() void                         # TODO: remove this dependency
link fn random() posix.long
link fn calloc(cb size_t, size size_t) *?void
link fn close(fd posix.int) posix.int
link fn errno() posix.int to __posix_errno
link fn exit(code posix.int) void
link fn fchdir(filedes posix.int) posix.int
link fn fclose(fp *FILE) posix.int
link fn fdopen(fd posix.int, mode *char) *?FILE
link fn feof(stream *FILE) bool
link fn ferror(stream *FILE) bool
link fn fflush(fp *FILE) posix.int
link fn fopen(fn *char, mode *char) *?FILE
link fn fprintf(fp *FILE, fmt *char, s *char) posix.int
link fn fscanf(fp *FILE, fmt *char, s *void) posix.int
link fn fputs(x *char, fp *FILE) posix.int
link fn fread(p *void, size size_t, nitems size_t, stream *FILE) size_t
link fn free(pb *?void) void
link fn fseek(stream *FILE, offset posix.int, whence posix.int) posix.int
link fn ftell(stream *FILE) posix.int
link fn fwrite(p *void, size size_t, nitems size_t, stream *FILE) size_t
link fn getch() posix.int
link fn getcwd(_ null) *?char
link fn getenv(x *char) *?char
link fn getline(linep **?char, linecapp *int, fp *FILE) posix.int
link fn malloc(cb size_t) *?void
link fn memcmp(dst *void, src *void, n size_t) posix.int
link fn memcpy(dst *void, src *void, n size_t) *void
link fn memmove(dst *void, src *void, n size_t) *void
link fn open(path *char, oflag posix.int) posix.int
link fn pclose(fp *posix.FILE) posix.int
link fn perror(x *char) posix.int
link fn popen(command *char, mode *char) *?posix.FILE
link fn putchar(x posix.int) posix.int
link fn puts(x *char) posix.int
link fn qsort(base *void, nel size_t, width size_t, _ fn _(lhs *void, rhs *void) posix.int)
link fn raise(signal posix.int) posix.int
link fn read(fileds posix.int, buf *void, nbytes size_t) ssize_t
link fn realloc(ptr *void, cb size_t) *?void
link fn sleep(seconds uint) uint
link fn strcmp(x *char, y *char) posix.int
link fn strdup(s *char) *?char
link fn strlen(s *char) size_t
link fn strncmp(x *char, y *char, n size_t) posix.int
link fn strndup(s *char, n size_t) *?char
link fn write(fileds posix.int, buf *void, nbytes size_t) ssize_t

type int = int32
type long = int32

type FILE struct

# TODO: implement let-refs for module variables
var SEEK_SET posix.int = 0
var SEEK_END posix.int = 2
var SIGTRAP posix.int = 5
var SIGKILL posix.int = 9
