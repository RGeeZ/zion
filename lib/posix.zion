module posix

link in "c"
link in "m"
link in "rt_posix.o"

link def getenv(x *char) *?char
link def puts(x *char) int
link def fputs(x *char, fp *FILE) int
link def fprintf(fp *FILE, fmt *char, s *char) int to fprintf
link def putchar(x int) int
link def perror(x *char) int
link def open(path *char, oflag int) int
link def close(fd int) int
link def read(fileds int, buf *void, nbytes size_t) ssize_t
link def write(fileds int, buf *void, nbytes size_t) ssize_t
link def calloc(cb size_t, size size_t) *?void
link def malloc(cb size_t) *?void
link def realloc(ptr *void, cb size_t) *?void
link def memcpy(dst *void, src *void, n size_t) *void
link def memmove(dst *void, src *void, n size_t) *void
link def free(pb *?void) void
link def strdup(s *char) *?char
link def strndup(s *char, n size_t) *?char
link def strcmp(x *char, y *char) int
link def strncmp(x *char, y *char, n size_t) int
link [global] def sqrt(x float) float
link def arc4random_stir() void
link def arc4random_buf(dst *void, cb size_t) int
link def exit(code int) void
link def getch() int
link def getcwd(_ null) *?char
link def fchdir(filedes int) int
link def raise(signal int) int
link def fopen(fn *char, mode *char) *?FILE
link def fdopen(fd int, mode *char) *?FILE
link def fwrite(p *void, size size_t, nitems size_t, stream *FILE) size_t
link def fclose(fp *FILE) int
link def getline(linep **?char, linecapp *int, fp *FILE) int
link def strlen(s *char) size_t
link def putw(wch wchar, fp *FILE) int
link def mbstowcs(wcs *?wchar, mbs *char, mbslen size_t) size_t
link def wcscmp(x *wchar, y *wchar) int
link def wcsdup(s *wchar) *?wchar
link def wcslen(wcs *wchar) size_t
link def wcstombs(mbs *?char, wcs *wchar, wcslen size_t) size_t
link def wmemcmp(x1 *wchar, x2 *wchar, n uint) int
link def errno() int to __posix_errno
link def iswspace(wch wchar) bool
link def isspace(ch char) bool

type FILE struct

# TODO: implement let-refs for module variables
var SIGTRAP int = 5
var SIGKILL int = 9
