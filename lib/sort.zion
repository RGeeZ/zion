export {sort, sorted, quicksort, bubble_sort, is_sorted}

fn bubble_sort(xs) {
    # Perform an in-place bubble sort
    var n = len(xs)
    var next_n = 0
    while n > 1 {
        next_n = 0
        for i in [1..n-1] {
            if xs[i-1] > xs[i] {
                let x = xs[i-1]
                xs[i-1] = xs[i]
                xs[i] = x
                next_n = i
            }
        }
        n = next_n
    }
}

fn is_sorted(xs) {
    let iterator = iter(xs)
    if iterator() is Just(x) {
        var last = x
        while iterator() is Just(x) {
            if x < last {
                return False
            } else {
                last = x
            }
        }
    }
    return True
}

fn quicksort(xs) () {
    quicksort_core(xs, 0, len(xs)-1)
}

fn quicksort_core(A, lo, hi) {
    if lo < hi {
        let p = partition(A, lo, hi)
        quicksort_core(A, lo, p - 1)
        quicksort_core(A, p + 1, hi)
    }
}

fn partition(A, lo, hi) {
    let pivot = A[hi]
    var i = lo
    for j in [lo..hi-1] {
        if A[j] < pivot {
            let ai = A[i]
            A[i] = A[j]
            A[j] = ai
            i += 1
        }
    }
    let ai = A[i]
    A[i] = A[hi]
    A[hi] = ai
    return i
}

let sort = quicksort

fn sorted(xs) [a] {
  let xs = vector(xs)
  sort(xs)
  return xs
}

