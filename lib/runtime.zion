module runtime

get posix

# On MacOS:
# brew install libgc
# On Linux:
# apt-get install libgc-dev
link in "bdw-gc.pc"

link fn gc_malloc(cb size_t) *?void to GC_malloc
link fn gc_init() void to GC_init

fn on_assert_failure(msg str) void {
    # called match assertions fail
    posix.puts(c_str(msg).raw)
    posix.raise(posix.SIGTRAP)
}

fn mem_alloc(cb size_t) *?void {
    return gc_malloc(cb)
}

fn __get_ctor_id(v *var_t) CtorID {
    return v.ctor_id
}

fn create_var(alloc_size int) *var_t {
    obj := mem_alloc(alloc_size) as! *?var_t
    assert(obj != null)
    return obj
}

fn dbghex(v *void) *char {
    # LEAKLEAKLEAK
    return concat("0x", __str__(v as! int, 16))
}
