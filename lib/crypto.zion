module crypto

link in "sodium"

type crypto_generichash_state struct

link fn sodium_init() int
link fn crypto_generichash_bytes_min() size_t
link fn crypto_generichash_bytes_max() size_t
link fn crypto_generichash_statebytes() size_t
link fn crypto_generichash(out *int8, outlen size_t, input_ *int8, inlen size_t, key *?int8, keylen size_t) int
link fn crypto_generichash_init(state *crypto_generichash_state, key *int8, keylen size_t, outlen size_t) int
link fn crypto_generichash_update(state *crypto_generichash_state, input_ *int8, inputlen size_t) int
link fn crypto_generichash_final(state *crypto_generichash_state, out *int8, outlen size_t) int
link fn crypto_generichash_keygen(k *int8) void
link fn randombytes_random() uint32
link fn randombytes_uniform(upper_bound uint32) uint32
link fn randombytes_buf(buf *int8, size size_t) void


fn init() {
    if sodium_init() < 0 {
        posix.puts("failed to initialize libsodium")
        posix.exit(1)
    }
}

fn hash(input_ bytes, key bytes) bytes {
    outlen := crypto_generichash_bytes_max()
    out := alloc(outlen)
    crypto_generichash(out.data, out.cb, input_.data, input_.cb, key.data, key.cb)
    return out
}
        

[global]
fn hash(input_ str) bytes {
    outlen := crypto_generichash_bytes_max()
    out := alloc(outlen)
    crypto_generichash(out.data, out.cb,
        unsafe_access(input_) as! *int8,
        sizeof(char) * input_.length,
        null, 0)
    return out
}
