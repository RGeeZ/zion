module crypto

link in "sodium"

link def sodium_init() int
link def crypto_generichash_bytes_min() size_t
link def crypto_generichash_bytes_max() size_t
link def crypto_generichash_statebytes() size_t
link def crypto_generichash(out *int8, outlen size_t, input *int8, inlen size_t, key *?int8, keylen size_t) int
link def crypto_generichash_init(state *crypto_generichash_state, key *int8, keylen size_t, outlen size_t) int
link def crypto_generichash_update(state *crypto_generichash_state, input *int8, inputlen size_t) int
link def crypto_generichash_final(state *crypto_generichash_state, out *int8, outlen size_t) int
link def crypto_generichash_keygen(k *int8) void

type crypto_generichash_state struct

def init()
	if sodium_init() < 0
		posix.puts("failed to initialize libsodium")
		posix.exit(1)

def hash(input bytes, key bytes) bytes
	outlen := crypto_generichash_bytes_max()
	out := alloc(outlen)
	assert(out != null)
	crypto_generichash(out.data, out.cb, input.data, input.cb, key.data, key.cb)
	return out
		

def hash(input str) bytes
	outlen := crypto_generichash_bytes_max()
	out := alloc(outlen)
	assert(out != null)
	crypto_generichash(out.data, out.cb, input.raw as *int8, sizeof(wchar) * posix.wcslen(input.raw), null, 0)
	return out
	
	
