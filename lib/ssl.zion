module ssl

get pthread {mutex_t}

link in "openssl"
link in "rt_openssl.o"


link fn SSL_library_init() void
link fn SSL_load_error_strings() void
link fn ERR_load_BIO_strings() void
link fn ERR_load_crypto_strings() void
link fn ERR_load_SSL_strings() void
link fn ERR_load_ERR_strings() void
link fn RAND_load_file(filename *char, max_bytes int) int
link fn TLS_method() *SSL_METHOD
link fn TLS_client_method() *SSL_METHOD
link fn TLS_server_method() *SSL_METHOD

link fn SSL_CTX_new(method *SSL_METHOD) *SSL_CTX
link fn SSL_CTX_free(ctx *SSL_CTX) void

type SSL_CTX struct {}
type SSL_METHOD struct {}

var lock_cs *?mutex_t = null
var lock_count = OPENSSL_malloc(num * sizeof(int64)

fn ssl_setup_thread() void {
    num := CRYPTO_num_locks();
    lock_cs = OPENSSL_malloc(num * pthread_mutex_size()) as! *mutex_t
    lock_count

