global

get map {HashType}
#
# str
#
# the str type represents utf8 strings.
#

link in "rt_str.o"

link fn __str__(x int) *char to __str_int
link fn __str__(x int, y int) *char to __str_int_radix
link fn __str__(x float) *char to __str_float
link fn __str__(x *char) *char to __str_str
link fn concat(x *char, y *char) *char to __mbs_concat

type str has {
    let buffer OwningBuffer char
    let start uint
    let length uint
}

fn str(x str) str {
    return x
}

fn str[A, B](p (A, B)) str {
    return "(" + p[0] + ", " + p[1] + ")"
}

fn __map_hash__(s str) HashType {
    hash := hash(s)
    var hash_value HashType = 0
    posix.memcpy(&hash_value, hash.data, sizeof(HashType))
    return hash_value
}

fn __getitem__(s str, i uint) char {
    return s.buffer[s.start + i]
}

fn __init__() str {
    return ""
}

fn unsafe_access(u str) *char {
    return &u.buffer.raw[u.start]
}

fn str(buffer OwningBuffer char) str {
    return str(buffer, 0, buffer.length)
}

fn str(x int) str {
    return str(OwningBuffer(__str__(x)))
}

fn str(x float) str {
    return str(OwningBuffer(__str__(x)))
}

fn len(u str) uint {
    return u.length
}

fn str(b *int8, length size_t, encoding str) str {
    assert(encoding == "str")
    dest_len := length + 1
    dest := runtime.mem_alloc(dest_len)!
    posix.memcpy(dest, b, length)
    return str(OwningBuffer(dest as! *char))
}

fn __eq__(x str, y str) bool {
    # See above about coercions
    if x.length != y.length {
        return false
    }
    return posix.strncmp(unsafe_access(x), unsafe_access(y), x.length) == 0
}

fn __ineq__(x str, y str) bool {
    if x.length != y.length {
        return true
    }
    return posix.strncmp(unsafe_access(x), unsafe_access(y), x.length) != 0
}

fn __gt__(x str, y str) bool {
    length := min(x.length, y.length)
    ret := posix.strncmp(unsafe_access(x), unsafe_access(y), length)

    if ret < 0 {
        return false
    } else if ret > 0 {
        return true
    } else {
        return x.length > y.length
    } 
}

fn __gte__(x str, y str) bool {
    length := min(x.length, y.length)
    ret := posix.strncmp(unsafe_access(x), unsafe_access(y), length)

    if ret < 0 {
        return false
    } else if ret > 0 {
        return true
    } else {
        return x.length >= y.length
    } 
}

fn __lt__(x str, y str) bool {
    length := min(x.length, y.length)
    ret := posix.strncmp(unsafe_access(x), unsafe_access(y), length)

    if ret < 0 {
        return true
    } else if ret > 0 {
        return false
    } else {
        return x.length < y.length
    }
}

fn __lte__(x str, y str) bool {
    length := min(x.length, y.length)
    ret := posix.strncmp(unsafe_access(x), unsafe_access(y), length)

    if ret < 0 {
        return true
    } else if ret > 0 {
        return false
    } else {
        return x.length <= y.length
    } 
}

fn __getslice__(s str, start uint, lim uint) str {
    var length = lim - start
    s_len := len(s)

    if start >= s_len {
        return ""
    }
    if start + length > s_len {
        length = s_len - start
    }

    if start != 0 or length < s_len {
        return str(s.buffer, s.start + start, length)
    } else {
        return s
    }
}

fn c_str(u str) OwningBuffer char {
    # ensures a null-terminated string 
    if u.start != 0 or u.length != u.buffer.length {
        let pch = runtime.mem_alloc(sizeof(char) * (u.length + 1))! as! *char
        posix.memcpy(pch, unsafe_access(u), sizeof(char) * u.length)
        pch[u.length] = 0
        return OwningBuffer(pch, u.length)
    } else {
        return u.buffer
    }
}

fn __plus__(x str, y str) str {
    return concat(unsafe_access(x), x.length, unsafe_access(y), y.length)
}

fn __plus__[T where not (str === T)](x str, y T) str {
    let y_str = str(y)
    if x.length == 0 {
        return y_str
    }

    if y_str.length == 0 {
        return x
    }

    let result = concat(unsafe_access(x), x.length, unsafe_access(y_str), y_str.length)
    return result
}

type StrIter has {
    let s str
    var pos int
}

fn __iter__(s str) StrIter {
    return StrIter(s, 0)
}

fn __next__(cur StrIter) Maybe char {
    if cur.pos < cur.s.length {
        i := cur.pos
        cur.pos += 1
        return Just(cur.s[i])
    } else {
        return Nothing
    }
}

fn concat(x *char, x_len uint, y *char, y_len uint) str {
    let x_cb = sizeof(char) * x_len
    let y_cb = sizeof(char) * (y_len + 1)
    total_cb := x_cb + y_cb
    let res = runtime.mem_alloc(total_cb) as! *?char
    assert(res != null)
    posix.memcpy(res, x, x_cb)
    posix.memcpy(&res[x_len], y, y_cb)
    return str(OwningBuffer(res, x_len + y_len))
}

fn decode(b bytes, fmt str) str? {
    if fmt == "utf8" {
        b_len := len(b)
        res := runtime.mem_alloc(b_len + 1) as! *?char
        assert(res != null)
        posix.memcpy(res, b.data, b_len)
        res[b_len] = 0
        return Just(str(OwningBuffer(res, b_len)))
    } else {
        panic("unknown format to decode: " + fmt)
        return Nothing
    }
}

fn strip(s str) str {
    var start int = 0
    let max int = s.length
    var lim int = max - 1

    while start <= lim {
        if not posix.isspace(s[start]) {
            break
        }
        start += 1
    }
    
    while lim > start and posix.isspace(s[lim]) {
        lim -= 1
    }
    
    if start == 0 and lim == max - 1 {
        return s
    }
    
    return s[start:lim + 1]
}

fn split(s str) [str] {
    # Split a string based on whitespace
    let tokens [str]
    var i = 0
    var j = 0
    let s_length = s.length
    while true {
        while i < s_length and posix.isspace(s[i]) {
            i += 1
        }
        if i == s_length {
            break
        }

        j = i
        i += 1
        while i < s_length and not posix.isspace(s[i]) {
            i += 1
        }
        if j == 0 and i == s_length {
            append(tokens, s)
            break
        }
        append(tokens, s[j:i])
    }

    return tokens
}

fn split(s str, delims str) [str] {
    # Split a string based on the given delims
    let tokens [str]
    var i = 0
    var j = 0
    let s_length = s.length
    while true {
        while i < s_length and s[i] in delims {
            i += 1
        }
        if i == s_length {
            break
        }
        j = i
        i += 1
        while i < s_length and s[i] not in delims {
            i += 1
        }
        if j == 0 and i == s_length {
            append(tokens, s)
            break
        }
        append(tokens, s[j:i])
    }

    return tokens
}

fn __in__(ch char, s str) bool {
    var i = 0
    e := s.length
    while i < e {
        if s[i] == ch {
            return true
        }
        i += 1
    }
    return false
}

fn __not_in__(ch char, s str) bool {
    var i = 0
    e := s.length
    while i < e {
        if s[i] == ch {
            return false
        }
        i += 1
    }
    return true
}

fn __not_in__(find_ str, s_ str) bool {
    return not __in__(find_, s_)
}

fn __in__(find_ str, s_ str) bool {
    real_find_len := len(find_)
    if real_find_len == 0 {
        return true
    }

    # set up a search for the remaining characters (after the first)
    c := find_[0]
    find := &unsafe_access(find_)[1]
    find_len := real_find_len - 1
    
    var s_len = len(s_)
    if s_len == 0 {
        return false
    }

    var s = &unsafe_access(s_)[0]

    # OK, now start looping through s positions until we either run out of possible space for find,
    # or we find it
    while s_len > find_len {
        cur := s[0]
        s = &s[1]
        s_len -= 1

        if c == cur {
            if posix.memcmp(s, find, find_len) == 0 {
                return true
            }
        }
    }

    return false
}

fn find(s_ str, find_ str, start int) int? {
    real_find_len := len(find_)
    if real_find_len == 0 {
        return Just(0)
    }

    # set up a search for the remaining characters (after the first)
    c := find_[0]
    find_pos := &unsafe_access(find_)[1]
    find_len := real_find_len - 1
    
    var s_len int = len(s_) - start
    if s_len <= 0 {
        return Nothing
    }

    var s = &unsafe_access(s_)[start]

    # OK, now start looping through s positions until we either run out of
    # possible space for find, or we find it
    while s_len > find_len {
        cur := s[0]
        s = &s[1]
        s_len -= 1

        if c == cur {
            if posix.memcmp(s, find_pos, find_len) == 0 {
                return Just(start)
            }
        }
        start += 1
    }

    return Nothing
}

fn rfind(s_ str, find_ str) int? {
    var s_len int = len(s_)
    if s_len <= 0 {
        return Nothing
    }

    find_len := len(find_)
    if find_len == 0 {
        return Just(s_len)
    }

    var i int = s_len - find_len
    while i >= 0 {
        var j int = 0
        var k int = i
        while true {
            if s_[k] == find_[j] {
                j += 1
                k += 1
                if j >= find_len {
                    return Just(i)
                }
            } else {
                break
            }
        }
        i -= 1
    }
    return Nothing
}

fn replace(s str, find_ str, repl str) str {
    if len(find_) == 0 {
        return s
    }

    var cur = 0
    var sofar str
    while cur < len(s) {
        i := find(s, find_, cur)
        match i {
            Just(i) {
                sofar += s[cur:i]
                sofar += repl
                cur = i + len(find_)
            }
            Nothing {
                if len(sofar) == 0 {
                    return s
                } else {
                    sofar += s[cur:len(s)]
                    return sofar
                }
            }
        }
    }

    return sofar
}
