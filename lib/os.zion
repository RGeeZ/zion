module os
get posix

fn getcwd() str {
    cwd_utf8 := posix.getcwd(null)
    assert(cwd_utf8 != null)
    return str(OwningBuffer(cwd_utf8))
}

fn getenv(name str) str? {
    match OwningBuffer(posix.getenv(name)) {
        Just(buffer) {
            return Just(str(buffer))
        }
        Nothing {
            return Nothing
        }
    }
}

fn shell(cmd str) Either posix.int [str] {
    return shell(cmd, Nothing)
}

fn shell(cmd_parts [str]) Either posix.int [str] {
    return shell(cmd_parts)
}

fn shell(cmd_parts [str], pipe_text str) Either posix.int [str] {
    cmd := join(" ", cmd_parts)
    return shell(join(" ", cmd_parts), Just(pipe_text))
}

fn shell(cmd str, pipe_text str?) Either posix.int [str] {
    fp := posix.popen(
        cmd,
        match pipe_text {
            # REVIEW: this only works in BSD, because Linux does not have bidirectional pipes
            Just(_) => "r+"
            Nothing => "r"
        })
    if fp == null {
        return Left(posix.errno())
    }
    defer fn () { posix.pclose(fp) }

    match pipe_text {
        Just(text) {
            # print("Writing " + pipe_text + " to the process...")
            ret := posix.fprintf(fp, "%s", text)
            if ret < 0 {
                return Left(posix.errno())
            }
            posix.fflush(fp)
        }
        Nothing {
        }
    }

    var lines [str]
    for line in readlines(fp) {
        append(lines, line)
    }
    return Right(lines)
}
