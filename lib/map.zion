module map

# map is an associative array. it is currently implemented using O(n) searches for all operations.
# this is obviously not good, but it's just a placeholder to work with the language syntax and
# grammar as it evolves.

# FUTURE: we'll get ourselves a shiny fast implementation of an (un)ordered map.

type KeyValue K V has {
    key K
    var value V
}

# aka {KeyType: ValueType}
type Map KeyType ValueType has {
    # HACKHACK: O(n) BAD BAD
    var storage [KeyValue KeyType ValueType]
}

[global]
fn __init__[K, V]() Map K V {
    let storage [KeyValue K V]
    return Map(storage)
}

[global]
fn get[K, V](m Map K V, key K, default V) V {
    # HACKHACK: O(n) BAD BAD
    for kv in m.storage {
        if kv.key == key {
            return kv.value
        }
    }
    return default
}

[global]
fn __getitem__[K, V](m Map K V, key K) V? {
    # HACKHACK: O(n) BAD BAD
    for kv in m.storage {
        if kv.key == key {
            return Just(kv.value)
        }
    }
    return Nothing
}

[global]
fn __setitem__[K, V](m Map K V, key K, val V) {
    # HACKHACK: O(n) BAD BAD
    for kv in m.storage {
        if kv.key == key {
            kv.value = val
            return
        }
    }
    append(m.storage, KeyValue(key, val))
}

[global]
fn __in__[K, V](key K, m Map K V) bool {
    for kv in m.storage {
        if kv.key == key {
            return true
        }
    }
    return false
}

[global]
fn __not_in__[K, V](key K, m Map K V) bool {
    for kv in m.storage {
        if kv.key == key {
            return false
        }
    }
    return true
}

[global]
fn del[K, V](m Map K V, key K) bool {
    # HACKHACK: O(n) BAD BAD - also vector.ManagedVector coupling BAD BAD
    var i = 0
    let storage = m.storage
    let size = (storage as! *(vector.VectorImpl (KeyValue K V))).size
    while i < size {
        let item = storage[i]
        if item.key == key {
            splice(storage, int(i), 1)
            return true
        }
        i += 1
    }
    return false
}

[global]
fn __iter_begin__[K, V](map Map K V) vector.VectorIter (KeyValue K V) {
    return __iter_begin__(map.storage)
}

[global]
fn __iter_end__[K, V](map Map K V) vector.VectorIter (KeyValue K V) {
    return __iter_end__(map.storage)
}
