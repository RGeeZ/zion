global

link def hexdigit(val int) char

type bytes has
	let data *int8
	let cb size_t

def len(b bytes) size_t
	return b.cb

def alloc(cb int) bytes?
	if cb < 0
		assert(false and "attempt to allocate " + cb + " bytes")
		return null
	let pb = posix.calloc(1, cb)
	if pb != null
		return bytes(pb as *int8, cb)
	else
		return null

def __finalize__(b bytes)
	posix.free(b.data)

def hexdigest(b bytes) str
	return hexdigest(b.data, b.cb)

def hexdigest(data *void, cb size_t) str
	let s = posix.malloc(sizeof(char) * (cb * 2 + 1))! as *char
	iter := data as *uint8
	var j = 0
	for i in range(cb)
		# append to our hexdigest
		s[j] = hexdigit((iter[i] >> 4) as int)
		s[j + 1] = hexdigit((iter[i] & 15) as int)

		# advance iteration
		j += 2

	s[j] = 0
	return str(OwningBuffer(s))
