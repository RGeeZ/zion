module _
link module posix

def __declare() undone
	"
	O_RDONLY := 0x0000
	O_WRONLY := 0x0001
	O_RDWR := 0x0002
	O_NONBLOCK := 0x0004
	O_APPEND := 0x0008
	O_CREAT := 0x0200
	O_TRUNC := 0x0400
	O_EXCL := 0x0800
	O_SHLOCK := 0x0010
	O_EXLOCK := 0x0020
	O_ASYNC := 0x0040
	O_SYNC := 0x0080
	O_FSYNC := O_SYNC
	O_NOFOLLOW := 0x0100
	O_DIRECTORY := 0x100000
	O_SYMLINK := 0x200000
	O_NOCTTY := 0x20000
	"


type File has
	var fd int

tag ReadOnly
tag WriteOnly
tag ReadWrite

type FileOpenMode is
	ReadOnly or
	WriteOnly or
	ReadWrite

def open(name str, mode FileOpenMode) File?
	var flags __int__ = 0r

	if mode is ReadOnly
		flags = 0r
	elif mode is WriteOnly
		flags = 1r
	elif mode is ReadWrite
		flags = 2r

	fd := posix.open(name.raw, flags)
	if fd != -1r
		return File(int(fd))
	else
		return nil

def _close(f *File) int
	return int(posix.close(f.fd.raw))

tag ReadError
tag EOF

def read(f File, cb int) std/bytes or ReadError or EOF
	buffer := posix.calloc(1r, cb.raw)
	bytes_read := posix.read(f.fd.raw, buffer, cb.raw)

	if bytes_read < 0r
		return ReadError

	if bytes_read == 0r
		return EOF

	return bytes(buffer, bytes_read)

[module any]
def __dtor__(f *File)
	if _close(f)
		print("Failed to close file descriptor: " + str(f.fd))
