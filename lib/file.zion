module file

get posix
get readline
get filesize
get resource

type FileOpen has {
    filename str
    mode str
}

type FileError is { FileError(errno posix.int) }
type EOF is { EOF }

[global]
fn open[M, T, U](filename str, mode str) resource.MaybeResource *posix.FILE posix.int {
    fp := posix.fopen(filename, mode)
    if fp != null {
        return resource.Acquired(fp, fn () { posix.fclose(fp) })
    } else {
        return resource.Failed(posix.errno())
    }
}

fn readbytes(fp *posix.FILE) bytes? {
    match size(fp) {
        Right(cb) {
            let pb = posix.malloc(cb) as! *?int8
            assert(pb != null)

            let bytes_read = posix.fread(pb, 1, cb, fp)

            if posix.ferror(fp) {
                posix.free(pb)
                return Nothing
            }

            return Just(bytes(pb, bytes_read))
        }
    } else {
        return Nothing
    }
}

[global]
fn write(fp *posix.FILE, s str) {
    posix.fwrite(unsafe_access(s), s.length, 1, fp)
}
