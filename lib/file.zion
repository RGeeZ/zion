module _
link module posix

var O_RDONLY int = 0x0000
var O_WRONLY int = 0x0001
var O_RDWR int = 0x0002
var O_NONBLOCK int = 0x0004
var O_APPEND int = 0x0008
var O_CREAT int = 0x0200
var O_TRUNC int = 0x0400
var O_EXCL int = 0x0800
var O_SHLOCK int = 0x0010
var O_EXLOCK int = 0x0020
var O_ASYNC int = 0x0040
var O_SYNC int = 0x0080
var O_FSYNC int = O_SYNC
var O_NOFOLLOW int = 0x0100
var O_DIRECTORY int = 0x100000
var O_SYMLINK int = 0x200000
var O_NOCTTY int = 0x20000


type File has
	var fd __int__

tag ReadOnly
tag WriteOnly
tag ReadWrite

type FileOpenMode is
	ReadOnly or
	WriteOnly or
	ReadWrite

def open(name str, mode FileOpenMode) File?
	var flags __int__ = 0r

	when mode
		is ReadOnly
			flags = 0r
		is WriteOnly
			flags = 1r
		is ReadWrite
			flags = 2r

	fd := posix.open(name.raw, flags)
	if fd != -1r
		return File(fd)
	else
		return nil

def close(f File) int
	fd := f.fd
	if fd != -1r
		f.fd = -1r
		return int(posix.close(f.fd))
	return 0

tag ReadError
tag EOF

def read(f File, cb int) bytes or ReadError or EOF
	buffer := posix.calloc(1r, cb.raw) as *__int8__
	bytes_read := posix.read(f.fd, buffer, cb.raw)

	if bytes_read <= 0r
		posix.free(buffer)
		return bytes_read == 0r ? EOF : ReadError

	return bytes(buffer, bytes_read)


[module std]
def __finalize__(f File)
	print("finalizing file")
	if close(f)
		print("Failed to close file descriptor: " + str(f.fd))
