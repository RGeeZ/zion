import map {Map}
export {Set}

newtype Set a = Set(Map a ())

instance HasInsertableItems (Set a) a {
    fn insert(set, value) {
        let Set(map) = set
        map[value] = ()
    }
}

instance HasSetMembership (Set a) a {
    fn in(a, set) Bool {
        let Set(map) = set
        return a in map
    }
    fn not_in(a, set) Bool {
        let Set(map) = set
        return a not in map
    }
}

instance HasDefault (Set a) {
    fn new() {
        return Set({})
    }
}

instance HasLength (Set a) {
    fn len(set) {
        let Set(map) = set
        return len(map)
    }
}

instance Iterable (Set a) a {
    fn iter(set Set a) fn () Maybe a {
        let Set(inner_map) = set
        return iter(
            map(
                fn (pair) {
                    let (a, _) = pair
                    return a
                },
                inner_map)) as fn () Maybe a
    }
}
