data Bool {
    False
    True
}

class HasDefault a {
    fn new() a
}

class Show a {
    fn str(a) [Char]
}

instance Show [Char] {
    str = id
}

instance Show Int {
    fn str(x) {
        return "0"
    }
}


data Ref a {
    Ref(a)
}

fn load_ref(a Ref a) a => match a {
    Ref(a) => a
}

class Eq a {
    fn ==(a, a) Bool
    fn !=(a, a) Bool
    /*default {
        fn ==(a, b) {
            return not (a != b)
        }
        fn !=(a, b) {
            return not (a == b)
        }
    }*/
}

instance Eq *a {
    == = __builtin_ptr_eq
    != = __builtin_ptr_ne
}

instance Eq Int {
    == = __builtin_int_eq
    != = __builtin_int_ne
}

instance Eq Float {
    == = __builtin_float_eq
    != = __builtin_float_ne
}

class Num a {
    has Eq
    fn from_int(Int) a
    fn +(a, a) a
    fn *(a, a) a
    fn -(a, a) a
    fn /(a, a) a
    fn abs(a) a
    fn negate(a) a
}

data Ordering {
    EQ
    LT
    GT
}

class Ord a {
    fn compare(a, a) Ordering
    fn <(a, a) Bool
    fn <=(a, a) Bool
    fn >(a, a) Bool
    fn >=(a, a) Bool
}

instance Num Int {
    from_int = id
    + = __builtin_add_int
    * = __builtin_multiply_int
    - = __builtin_subtract_int
    / = __builtin_divide_int
    negate = __builtin_negate_int
    abs = __builtin_abs_int
}

instance Num Float {
    from_int = __builtin_int_to_float
    + = __builtin_add_float
    * = __builtin_multiply_float
    - = __builtin_subtract_float
    / = __builtin_divide_float
    negate = __builtin_negate_float
    abs = __builtin_abs_float
}

data Maybe t {
    Just(t)
    Nothing
}

class Functor f {
    fn fmap(fn (a) b, f a) f b
}

data ExitCode {
    ExitOK
    ExitError(Int)
}

data Either a b {
    Left(a)
    Right(b)
}

struct Vector a {
    array Ref *a
    size Ref Int
    capacity Ref Int
}

instance HasDefault [a] {
    fn new() {
        return Vector(Ref(null), Ref(0), Ref(0))
    }
}

let unit = ()
fn id(x) => x
fn print(x) => __builtin_print(str(x))
fn panic(x) {
    print(x)
    __builtin_exit(1)
}

fn append(vec [a], val a) {
    if !vec.array == null {
    }
}

fn __getitem__(v Vector a, i Int) a {
    if (!v.array == null) {
        print("Array index out of bounds")
    }
}



