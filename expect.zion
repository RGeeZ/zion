module expect

get os
get sys
get argparse


fn gather_comments(preface, progname) [str] {
    lines := os.shell("grep '^# " + preface + ": ' " + str(progname))
    return match lines {
        Left(errno) => []
        Right(lines) {
            let comments [str]
            for comment in lines { 
                comment = strip(comment)
                append(comments, comment[len("# " + preface + ": "):len(comment)])
            }
            comments
        }
    }
}

fn get_program(args [str]) str? {
    let options [str: argparse.Option]
    options["-p"] = argparse.Option("program", true, true)
    parser := Parser("Expect tests", options, false)
    with args := argparse.parse(parser, args) {
        return args["program"]
    } else parse_error {
        print(parse_error.reason)
        print(parse_error.usage())
        return Nothing
    }
}

fn main() int {
    program := match get_program(sys.args[1:len(sys.args)]) {
        Just(program) => program
        Nothing       => return 1
    }

    tests := gather_comments("test", program)
    if "pass" not in tests {
        print("Skipping " + program)
        return 0
    }

    injects := gather_comments("inject", program)
    expects := gather_comments("expect", program)
    rejects := gather_comments("reject", program)

    if len(expects) == 0 and len(rejects) == 0 {
        return 0
    }

    print("----------" + " " + program + " " + "--------------------")
    cmd := "./zion run " + program
    print("running " + cmd)

    injection := len(injects) != 0 ? Just(join("\n", injects)) : Nothing
    actual := match os.shell(cmd, injection) {
        Right(actual)    => actual
        Left(returncode) {
            print("Return code is " + str(returncode))
            print("Process returned a non-zero value. Failing!")
            return 1
        }
    }

    print(len(expects))
    return 0
}

fn d(expects, rejects, actual) int {
    for expect in expects {
        msg := "Searching for " + expect + " in output from " + program + "..."

        if expect not in actual {
            print(msg + " error.")
            print(actual)
            return 1
        } else {
            print(msg + " success.")
            continue
        }
    }

    for reject in rejects {
        msg := "Hoping to not see " + reject + " in output from " + program + "..."

        if reject in actual {
            print(msg + " error.")
            print(actual)
            return 1
        } else {
            print(msg + " success.")
            continue
        }
    }
    return 0
}
