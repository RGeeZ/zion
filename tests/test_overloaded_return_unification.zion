module _
# test: pass
# expect: B -1.000

type A is { B(f float) C }

fn overloaded_return_unification() float {
    # the unary negation operator is overloaded so this test will make sure
    # that the overloaded type returned is able to be unified against a float
    return -1.0
}

[global]
fn str(a A) str {
    match a {
        B(f) {
            return "B " + f
        }
        C {
            return "C"
        }
    }
}

fn main() {
    overloaded_return_unification()

    print(B(overloaded_return_unification()))
}
