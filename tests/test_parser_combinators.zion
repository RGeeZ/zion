module _
# test: pass
# expect: Symbol

get sys

type Symbol has
	let s str
	let pos uint

type Sequence has
	let nodes [Node]

type Node is Symbol or Sequence

[global]
def str(n Node) str
	when n
		is Symbol
			return "Symbol('" + n.s + "', " + n.pos + ")"
		is Sequence
			return "[" + join(", ", n.nodes) + "]"

type ParseState has
	let s str
	let i uint

type Step has
	let node Node
	let ps ParseState

type Parser = def (ps ParseState) Step?

def parse_token(k str) Parser
	return def (ps ParseState) Step?
		var start = ps.i
		while start < len(ps.s) and isspace(ps.s[start])
			start += 1
		var i = start
		while i < len(ps.s) and i-start < len(k) and k[i-start] == ps.s[i]
			i += 1
		# print("while matching for token '" + k + "' we are at position " + i + " and start = " + start)

		if start != i
			symbol := ps.s[start:i]
			if symbol == k
				return Step(Symbol(symbol, start), ParseState(ps.s, i))
		return null

def parse_symbol(ps ParseState) Step?
	var start = ps.i
	while start < len(ps.s) and isspace(ps.s[start])
		start += 1
	var i = start
	while i < len(ps.s) and isalpha(ps.s[i])
		i += 1

	if start != i
		return Step(Symbol(ps.s[start:i], start), ParseState(ps.s, i))
	else
		return null

def __bitwise_or__(p1 Parser, p2 Parser) Parser
	return def (ps ParseState) Step?
		step := p1(ps)
		if step != null
			return step
		else
			return p2(ps)
			
def __plus__(p1 Parser, p2 Parser) Parser
	return def (ps ParseState) Step?
		step1 := p1(ps)
		if step1 != null
			step2 := p2(step1.ps)
			if step2 != null
				return Step(Sequence([step1.node, step2.node]), step2.ps)
		return null
			
def __plus__(s str, p2 Parser) Parser
	return parse_token(s) + p2
			
def __plus__(p1 Parser, s str) Parser
	return p1 + parse_token(s)
			
def parse_kleene_star(parser Parser) Parser
	return def (ps ParseState) Step?
		let nodes [Node]
		while ps.i < len(ps.s)
			next_step := parser(ps)
			if next_step != null
				append(nodes, next_step.node)
				ps = next_step.ps
			else
				break
		return Step(Sequence(nodes), ps)

def main()
	program := "def f x = * x x"
	print(program)
	ps := ParseState(program, 0)

	parse_expr := (parse_token("*") | parse_token("+") | parse_token("-")) + parse_symbol + parse_symbol
	parse_parens := "(" + parse_expr + ")"
	parser := "def" + parse_symbol + parse_kleene_star(parse_symbol) + "=" + parse_expr

	step := parser(ps)
	if step != null
		print(step.node)
		print(step.ps.i)
