module _
# test: pass
# expect: Symbol

get sys
get list

type Node is {
    Symbol(s str, pos uint)
    Sequence(nodes [Node])
}

[global]
fn str(n Node) str {
    match n {
        Symbol(s, pos) {
            return "Symbol('" + s + "', " + pos + ")"
        }
        Sequence(nodes) {
            return "[" + join(", ", nodes) + "]"
        }
    }
}

type ParseState has {
    let s str
    let i uint
}

type Step is {
    Step(node Node, ps ParseState)
}

type Parser = fn (ps ParseState) Step?

fn parse_token(k str) Parser {
    return fn (ps ParseState) Step? {
        var start = ps.i
        while start < len(ps.s) and isspace(ps.s[start]) {
            start += 1
        }
        var i = start
        while i < len(ps.s) and i-start < len(k) and k[i-start] == ps.s[i] {
            i += 1
        }
        # print("while matching for token '" + k + "' we are at position " + i + " and start = " + start)

        if start != i {
            symbol := ps.s[start:i]
            if symbol == k {
                return Just(Step(Symbol(symbol, start), ParseState(ps.s, i)))
            }
        }
        return Empty
    }
}

fn parse_symbol(ps ParseState) Step? {
    var start = ps.i
    while start < len(ps.s) and isspace(ps.s[start]) {
        start += 1
    }
    var i = start
    while i < len(ps.s) and isalpha(ps.s[i]) {
        i += 1
    }

    if start != i {
        return Just(Step(Symbol(ps.s[start:i], start), ParseState(ps.s, i)))
    } else {
        return Empty
    }
}

fn __bitwise_or__(p1 Parser, p2 Parser) Parser {
    return fn (ps ParseState) Step? {
        step := p1(ps)
        match step {
            Just(_) {
                return step
            }
        } else {
            return p2(ps)
        }
    }
}
            
fn __backslash__(p1 Parser, p2 Parser) Parser {
    /*
    return fn (ps ParseState) Step? = do {
        Step(node1, ps1) := p1(ps)
        Step(node2, ps2) := p2(ps1)
        return Step(Sequence([node1, node2]), ps2)
    }
    */

    return fn (ps ParseState) Step? {
        return bind(p1(ps), fn (x Step) Step? {
            match x {
                Step(node1, ps1) {
                    return bind(p2(ps1), fn (y Step) Step? {
                        match y {
                            Step(node2, ps2) {
                                return pure(Step(Sequence([node1, node2]), ps2)) as Step?
                            }
                        } /* else {
                            return fail("")
                        }*/
                    })
                }
            } /*else {
                return fail("")
            }*/
        })
    }
}
            
fn __backslash__(s str, p2 Parser) Parser {
    return parse_token(s) \ p2
}
            
fn __backslash__(p1 Parser, s str) Parser {
    return p1 \ parse_token(s)
}
            
fn parse_kleene_star(parser Parser) Parser {
    return fn (ps ParseState) Step? {
        let nodes [Node]
        while ps.i < len(ps.s) {
            match parser(ps) {
                Just(Step(node, next_ps)) {
                    append(nodes, node)
                    ps = next_ps
                }
                Empty {
                    break
                }
            }
        }
        return Just(Step(Sequence(nodes), ps))
    }
}

[global]
fn str[Args, R](f fn (..Args) R) str {
    return "<closure>"
}

fn print_node(s Step) int {
    match s {
        Step(node, ps) {
            print(node)
            print(ps.i)
        }
    }
    return 0
}

fn main() {
    program := "fn f x = * x x"
    print(program)
    ps := ParseState(program, 0)

    parse_expr := (parse_token("*") | parse_token("+") | parse_token("-")) \ parse_symbol \ parse_symbol
    parse_parens := "(" \ parse_expr \ ")"
    parser := "fn" \ parse_symbol \ parse_kleene_star(parse_symbol) \ "=" \ parse_expr

    fmap(print_node, parser(ps))

    ret := compose(fn (s int) Maybe int {
        return Just(s)
    }, print_node)

    bind(parser(ps), ret)

    # The following Haskell list comprehension (from https://www.haskell.org/tutorial/monads.html)
    # [(x,y) | x <- [1,2,3] , y <- [1,2,3], x /= y]
    # would look like this desugared in Zion...
    print(
        bind([1, 2, 3], fn (x int) {
            return bind([1, 2, 3], fn (y int) {
                return bind([x != y and y != x], fn (r bool) {
                    if r {
                        return [(x, y)]
                    } else {
                        return fail("")
                    }
                })
            })
        }
    ))

    # [1,2,3] >>=
    #  (\ x -> [1,2,3] >>=
    #   (\y -> return (x/=y) >>=
    #    (\r -> case r of True -> return (x,y)
    #                     _    -> fail "")))
}
