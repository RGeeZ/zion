get functor {fmap, Functor}

fn sqr(a) => a * a
let I = fn (x) => x
let S = fn (x, y, z) => x(z)(y(z))
let K = fn (x, y) => x
let SKK = S(K)(K)

fn add(x, y) => x + y
fn twice(f, x) => f(f(x))
fn plus4(x) => twice(add(2))(x)
fn hey() {
    return plus4(3)
}

instance Num Int {
    from_int = id
    + = __add_int
    * = __multiply_int
    - = __subtract_int
    / = __divide_int
}

instance Functor Maybe {
    fn fmap(f, m) {
        return Just(3)
    }
}

class Foo a {
    fn get_foo(Int) a
}

instance Foo a {
    fn get_foo(x) => 4
}

# let dictFunctorMaybe = (FunctorMaybe.fmap,)
# let dictNumInt = (NumInt.from_int, NumInt.+, NumInt.*, ...)

fn doit(m) {
    return m
}

fn test_doit() {
    return doit(Just("hey"))
}

fn main() {
    return fmap(fn (x) => "str", Just(3))
}
