module _
# test: pass

def nth(l Node{any T}?, i int) any T?
	when l
		is null
			return null
		is Node{any T}
			if i == 0
				return l.value
			else
				return nth(l.next, i - 1)
	return null


type Node{T} has
	var value T
	var next Node{T}?

def str(node Node{any T}?) str
	sum := "["
	delim := ""
	while true
		cur_node := node
		when cur_node
			is null
				sum = sum + "]"
				break
			is Node{any T}
				sum = sum + delim + cur_node.value
				print(sum)
				node = cur_node.next
			# TODO: handle correctly covering all enum possibilities
		else
			print("Fail")
			assert(false)
			break
	
	return sum

def main()
	x := Node(3, Node(3, null))
	static_print(x)
	y := nth(x, 0)
	if y
		print(y)
