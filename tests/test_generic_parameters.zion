module _
# test: pass
# expect: 28231

fn nth[T](l (Node T)?, i int) T? {
    match l {
        Nothing => return Nothing
        Just(l) {
            if i == 0 => return Just(l.value)
            else      => return nth(l.next, i - 1)
        }
    }
}

type Node T has {
    var value T
    var next (Node T)?
}

fn main() {
    x := Node(3, Just(Node(28231, Nothing)))
    nth(Just(x), 1)
    match nth(Just(x), 1) {
        Just(y) => print(y)
        Nothing => ()
    }
}
