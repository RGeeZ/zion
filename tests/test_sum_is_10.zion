module _
# test: pass

type Literal{T} has
	var value T

type Plus{T} has
	var e1 Expr{T}
	var e2 Expr{T}

type Minus{T} has
	var e1 Expr{T}
	var e2 Expr{T}

type Times{T} has
	var e1 Expr{T}
	var e2 Expr{T}

type Divide{T} has
	var e1 Expr{T}
	var e2 Expr{T}

type Expr{T} is
	Plus{T} or
	Minus{T} or
	Times{T} or
	Divide{T} or
	Literal{T}

def compute(expr Expr{any X}) any X 
	# TODO: implement pattern matching...
	return 0

def main()
	expr := Divide(Plus(Literal(5), Literal(5)), Literal(2))
	print(compute(expr))
