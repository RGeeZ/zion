module _
get sys

# test: pass
# expect: 4613732

type FibonacciSequence is { FibonacciSequence }

type FibonacciIterator has {
    var index int
    var prior int
    var cur int
}

fn __iter__(_ FibonacciSequence) FibonacciIterator {
    return FibonacciIterator(0, 1, 1)
}

fn __next__(fs FibonacciIterator) int? {
    fs.index += 1
    if fs.index > 2 {
        next := fs.prior + fs.cur
        fs.prior = fs.cur
        fs.cur = next
    }
    return Just(fs.cur)
}

fn main() {
    var sum = 0
    for n in FibonacciSequence {
        if n > 4000000 {
            break
        }
        if n % 2 == 0 {
            sum += n
        }
    }
    print(sum)
}
