module suite
get assert
get eightq
get sys
get capture

fn main() any
    "Run tests in Zion."
    suite.test_char()
    suite.test_while_break()
    suite.test_parentheses()
    suite.test_indexing()
    suite.test_eight_queens()
    suite.test_mod()
    suite.test_inc_assign()
    suite.test_unicode()
    suite.test_sys()
    suite.test_alloc_free()
    suite.test_type_builtin()
    suite.test_float_operations()
    suite.test_scopes()
    suite.test_unnamed_lambda()
    suite.test_closure_return()
    capture.test()

    return [1, 0]

fn test_char() void
    assert.equals('c', 'c', "char c")
    assert.equals('\b', '\b', "bell char")
    assert.equals('\n', '\n', "bell char")

fn test_while_break() void
    i := 0
    while true
        if i == 100
            break
        i += 1
    i = 0
    while i < 100
        i += 1

fn test_parentheses() void
    x := "hey"
    if (x !=
        "hey")
        print("Fail!")

fn test_indexing() void
    s := "Zion"
    assert.equals(s[0], "C", "string indexing")
    assert.equals(s[1], "i", "string indexing")
    assert.equals(s[2], "d", "string indexing")
    assert.equals(s[3], "e", "string indexing")
    assert.equals(s[4], "r", "string indexing")

fn test_eight_queens() void
    assert.equals(len(eightq.main(5)), 10, "5 queens")

fn test_mod() void
    assert.equals(555 % 5, 0, "555 % 5")
    assert.equals(557 % 5, 2, "557 % 5")

fn test_inc_assign() void
    x := 1
    x += 1
    x *= 17
    x -= 4
    x %= 27
    x /= 2
    assert.equals(x, 1, "a bunch of mutating assignments")

fn test_unicode() void
    assert.equals("\u5ECC", "廌", "unicorn in CJK Unified Ideographs")

    汉堡 := "hamburger"
    assert.equals(汉堡, "hamburger", "Mandarin word for hamburger")

    廌 := "unicorn"
    assert.equals(廌, "unicorn", "variables in CJK Unified Ideographs")


fn test_sys() void
    sys.write(1, "This is from sys.write.\n")

fn test_alloc_free() void
    ptr := malloc(10)
    free(ptr)

fn test_type_builtin() void
    assert.equals(type("hey"), "str", "str")
    
    assert.equals(type(1), "int", "int")
    
    assert.equals(type(3.223), "double", "double")
    
    assert.equals(type(true), "bool", "bool")
    assert.equals(type(false), "bool", "bool")
    
    assert.equals(type(type), "callable", "callable")
    assert.equals(type(sys.write), "callable", "callable")

    # This is just a comment
    x := []    
    y := x
    assert.equals(type(y), "reference", "reference")  # cool
    
    assert.equals(type([3, 4, 2]), "vector", "vector")
    
    assert.equals(type(malloc(128)), "buffer", "a buffer")

    buf_ := malloc(128)
    buf := type(buf_)
    assert.equals(buf, "reference", "buffer")
    free(buf_)
    
    assert.equals(type(null), "null", "null")

fn test_float_operations() void
    assert.equals(3 + 4 > 6, true, "int addition with ineq")
    assert.equals(3.0 + 4.0 > 6.0, true, "float addition with ineq")
    assert.equals(3.0 + 4.0 < 60.0, true, "float addition with ineq")
    assert.equals(3.0e2 + 4e2 < 2e3, true, "float ineq with exponents")
    assert.equals(3.0 - 4.0 > -60.0, true, "float addition with ineq")

    # TODO: handle coercion of inequalities
    # assert.equals(3.0 - 4.0 > -60, true, "float addition with gt")
    # assert.equals(3.0 - 4.0 >= -60, true, "float subtraction with gte")
    # assert.equals(3.0 + 4.0 != 7, false, "float addition with !=")
    # assert.equals(3.0 - 4.0 < -60, false, "float addition with lt")
    # assert.equals(3.0 - 4.0 <= -60, false, "float addition with lte")

    # TODO: handle coercion of addition
    # assert.equals(3.0 + 4, 7.0, "float + int")

    # TODO: handle coercion of subtraction
    # assert.equals(3.0 - 4, -1.0, "float - int")

    # TODO: handle coercion of multiplication
    # assert.equals(3.0 * 4, 12.0, "float * int")

    # TODO: handle coercion of division
    # assert.equals(3.0 / 4, 0.75, "float / int")

fn test_scopes() void
    x := 42

    fn scoped_func() void
        assert.equals(42, x, "nested lexically scoped closures")

    scoped_func()
    x = 41
    scoped_func()

fn test_unnamed_lambda() void
    x := 42

    scoped_func := fn(y int) void
        assert.equals(y, x, "nested lexically scoped closures")

    scoped_func(42)
    x = 41
    scoped_func(42)

fn test_closure_return() void
    x := 5
    fn inner_func_creator(x int) func
        return fn(y int) int
            return x + y
    f := inner_func_creator(6)
    assert.equals(f(1), 7, "closure from an inner function")
    assert.equals(x, 5, "simple test")
