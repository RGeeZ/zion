module _
# test: pass
# expect: -40: -40
# expect: -32728: 32728
# expect: max_int: 9223372036854775807
# expect: max_int_plus_one: -9223372036854775808
# expect: 255 ^ 255 == 0
# expect: 255 ^ 254 == 1
# expect: 255 | 254 == 255
# expect: 255 << 2 == 1020
# expect: (255 << 2) as int8 == -4
# expect: (255 as int8) << 2 == -4
# expect: (127 as int8) << 2 == 508
# expect: (127 as int8) >> 2 == 31
# expect: -1 & 0 == 0
# expect: -1 & 4 == 4

link def printf(fmt *char, a *char) int
link def printf(fmt *char, a int64) int

def main()
    var y int32 = 32808
    var x1 int8 = -y
    printf("-40: %lld\n", x1)

    var x2 int16 = -y
    printf("-32728: %lld\n", x2)

    var max_signed_int int64 = 0x7FFFFFFFFFFFFFFF
    printf("max_int: %lld\n", max_signed_int)

    var max_signed_int_plus_one int64 = 0x7FFFFFFFFFFFFFFF + 1
    printf("max_int_plus_one: %lld\n", max_signed_int_plus_one)

    printf("255 ^ 255 == %lld\n", 255 ^ 255)
    printf("255 ^ 254 == %lld\n", 255 ^ 254)
    printf("255 | 254 == %lld\n", 255 | 254)
    printf("255 << 2 == %lld\n", 255 << 2)
    printf("(255 << 2) as int8 == %lld\n", (255 << 2) as int8)
    printf("(255 as int8) << 2 == %lld\n", 255 as int8 << 2)
    printf("(127 as int8) << 2 == %lld\n", 127 as int8 << 2)
    printf("(127 as int8) >> 2 == %lld\n", 127 as int8 >> 2)
    printf("-1 & 0 == %lld\n", -1 & 0)
    printf("-1 & 4 == %lld\n", -1 & 4)
    # assert(MAX_INT32 + MAX_INT32 != 2147483648)
