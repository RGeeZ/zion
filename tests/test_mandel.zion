module test_mandel
get runtime
get sys

# test: pass

link Complex to math.Complex

type Rectangle has {
    var x float
    var y float
    var width float
    var height float
}


fn alpha(x float, min float, max float) float {
    return (x - min) / (max - min)
}

fn lerp(alpha float, min float, max float) float {
    return alpha * (max - min) + min
}

fn main() {
    var width = 240
    var height = 240
    if len(sys.args) == 3 {
        width = int(sys.args[1])
        height = int(sys.args[2])
    }
        
    maxDepth := 20

    print("P2")
    print(str(width) + " " + height)
    print(maxDepth)
    r := Rectangle(-3.14159, -2.5, 5.0, 5.0)
    display_grid := Rectangle(0.0, 0.0, float(width), float(height))

    var span [int]
    reserve(span, int(display_grid.width))

    var y = display_grid.y
    while y < display_grid.height {
        resize(span, 0, 0)

        let b = lerp(alpha(y, display_grid.y, display_grid.y + display_grid.height), r.x, r.x + r.width)
        var x = display_grid.x
        while x < display_grid.width {
            let a = lerp(alpha(x, display_grid.x, display_grid.x + display_grid.width), r.y, r.y + r.height)
            var z = math.Complex(b, a)
            let c = z
            var i = 0

            while true {
                if i < maxDepth {
                    if z.imag * z.imag + z.real * z.real < 16.0 {
                        z = z * z + c
                        i += 1
                        continue
                    }
                }
                break
            }
            append(span, i)
            x += 1
        }

        print(join(" ", span))

        y += 1.0
        runtime.gc()
    }
}
