module _
# test: pass
# expect: 16
# expect: 16
# expect: 16

type __Value__ struct {
    var size int64
    var name *char
    var typeinfo *__TypeInfo__
}

type __TypeInfo__ struct {
    var addref *fn _(v *__Value__) void
    var release *fn _(v *__Value__) void
}

fn addref(v *__Value__) void {
}

fn release(v *__Value__) void {
}

type __TwoInts__ struct {
    var x int
    var y int
}

type TwoInts has {
    var x int
    var y int
}

fn main() {
    # With standard aligned sizeof we get some extra padding for the managed
    # types
    print(sizeof(__TwoInts__))  # 16
    print(sizeof(TwoInts))      # 64
    print(sizeof(__TypeInfo__)) # 24
}
